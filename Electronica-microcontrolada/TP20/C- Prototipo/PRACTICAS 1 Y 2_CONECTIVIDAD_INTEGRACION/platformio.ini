; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env:esp32dev]
platform = espressif32
board = esp32dev
framework = arduino

#include <WiFi.h>

// Credenciales para conectarse a una red WiFi existente (modo estación)
const char* ssid_estacion = "test123"; 
const char* password_estacion = "test123";

// Credenciales para el punto de acceso (modo AP)
const char* ssid_ap = "test";
const char* password_ap = "test"; 

// Variable para controlar el modo de operación (0: estación, 1: AP)
int modo = 0; 

void setup() {
  Serial.begin(115200);

  if (modo == 0) {
    // Modo estación: Conectarse a una red WiFi existente
    WiFi.begin(ssid_estacion, password_estacion);
    Serial.print("Conectando a WiFi...");

    int intentosConexion = 0;
    const int maxIntentosConexion = 20; 
    while (WiFi.status() != WL_CONNECTED && intentosConexion < maxIntentosConexion) {
      delay(500);
      Serial.print(".");
      intentosConexion++;
    }

    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("");
      Serial.println("Adentro diria Soledad Silveira!");
      Serial.print("Direccion IP asignada: ");
      Serial.println(WiFi.localIP());
    } else {
      Serial.println("");
      Serial.println("Error al conectar a la red WiFi. Cambiando a modo AP...");
      modo = 1; // Cambiar a modo AP si falla la conexión
    }
  }

  if (modo == 1) {
    // Modo AP: Crear un punto de acceso
    WiFi.softAP(ssid_ap, password_ap); 
    IPAddress IP = WiFi.softAPIP();
    Serial.print("Punto de Acceso iniciado. SSID: ");
    Serial.println(ssid_ap);
    Serial.print("Contraseña: ");
    Serial.println(password_ap);
    Serial.print("Dirección IP del AP: ");
    Serial.println(IP);
  }
}

void loop() {
  if (modo == 0) {
    // Modo estación: Verificar conexión y reconectar si es necesario
    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("Desconectado de red WiFi, intentando reconectar...");
      WiFi.reconnect();

      int intentosReconexion = 0;
      const int maxIntentosReconexion = 10; 
      while (WiFi.status() != WL_CONNECTED && intentosReconexion < maxIntentosReconexion) {
        delay(1000);
        Serial.print(".");
        intentosReconexion++;
      }

      if (WiFi.status() == WL_CONNECTED) {
        Serial.println("");
        Serial.println("Reconectado a red WiFi.");
      } else {
        Serial.println("");
        Serial.println("Error al reconectar a la red WiFi. Cambiando a modo Punto de Acceso...");
        modo = 1; // Cambiar a modo AP si falla la reconexión
        setup(); // Reiniciar el ESP32 para configurar el modo AP
      }
    }

    delay(10000); 
  } else if (modo == 1) {
    // Modo AP: Mostrar el número de clientes conectados
    int numClientes = WiFi.softAPgetStationNum();
    Serial.print("Clientes conectados: ");
    Serial.println(numClientes);

    delay(2000); 
  }
}